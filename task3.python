{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "66bda69b-831c-4066-9c2d-7708a42423ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted gender for the new entry: male\n",
      "\n",
      "Updated dataset after adding the new entry:\n",
      "[[  1.     6.   180.    12.  ]\n",
      " [  1.     5.92 190.    11.  ]\n",
      " [  1.     5.58 170.    12.  ]\n",
      " [  1.     5.92 165.    10.  ]\n",
      " [  0.     5.   100.     6.  ]\n",
      " [  0.     5.5  150.     8.  ]\n",
      " [  0.     5.42 130.     7.  ]\n",
      " [  0.     5.75 150.     9.  ]\n",
      " [  1.     5.5  160.    10.  ]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Step 1: Define the data using numpy arrays\n",
    "# Data: ['Gender', 'Height', 'Weight', 'Foot_Size']\n",
    "data = np.array([\n",
    "    [1, 6.00, 180, 12],  # male\n",
    "    [1, 5.92, 190, 11],  # male\n",
    "    [1, 5.58, 170, 12],  # male\n",
    "    [1, 5.92, 165, 10],  # male\n",
    "    [0, 5.00, 100, 6],   # female\n",
    "    [0, 5.50, 150, 8],   # female\n",
    "    [0, 5.42, 130, 7],   # female\n",
    "    [0, 5.75, 150, 9]    # female\n",
    "])\n",
    "# Step 2: Separate features (X) and target variable (y)\n",
    "X = data[:, 1:]  # Features: Height, Weight, Foot_Size\n",
    "y = data[:, 0]   # Target: Gender (1 for male, 0 for female)\n",
    "# Step 3: Train the Decision Tree Classifier\n",
    "clf = DecisionTreeClassifier()\n",
    "clf.fit(X, y)\n",
    "# Step 4: Define a new entry to predict (example input)\n",
    "new_entry = np.array([[5.5, 160, 10]])\n",
    "# Step 5: Predict the gender of the new entry\n",
    "predicted_gender = clf.predict(new_entry)[0]\n",
    "predicted_gender_label = 'male' if predicted_gender == 1 else 'female'\n",
    "# Print the predicted gender for the new entry\n",
    "print(f\"Predicted gender for the new entry: {predicted_gender_label}\")\n",
    "# Step 6: Add the new entry with the predicted label to the dataset\n",
    "# Create a new entry with the predicted gender and append it to the original data\n",
    "new_entry_with_gender = np.hstack([np.array([[predicted_gender]]), new_entry])  # Add predicted gender to the new entry\n",
    "updated_data = np.vstack([data, new_entry_with_gender])  # Append the new entry to the dataset\n",
    "# Step 7: Retrain the classifier with the updated dataset\n",
    "X_updated = updated_data[:, 1:]  # Updated features\n",
    "y_updated = updated_data[:, 0]   # Updated target\n",
    "clf.fit(X_updated, y_updated)\n",
    "# Step 8: Display the updated dataset and retrained model\n",
    "print(\"\\nUpdated dataset after adding the new entry:\")\n",
    "print(updated_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9101c876-986b-4dac-9808-d57505786e4c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
